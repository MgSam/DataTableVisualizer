<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

<# 
var types = new [] { "double", "int", "long", "float", "short", "byte", "ulong", "uint", "ushort", "sbyte"};

string upper(string s)
{
    var sb = new StringBuilder();
    sb.Append(char.ToUpper(s[0]));
    var startLoc = 1;

    if(s.StartsWith("u") || s.StartsWith("sb")) 
    {
        sb.Append(char.ToUpper(s[1]));
        startLoc = 2;
    }

    for(var i = startLoc; i < s.Length; i++)
    {
        sb.Append(s[i]);
    }
    return sb.ToString();
}
#>
using System;

namespace DataTableViewer
{
    public static class TypeUtil
    {
        /// <summary>
        /// Checks if o1 and o2 are number types and if so, tries to make them the same type so comparison can succeed.
        /// </summary>
        public static void NormalizeTypes(ref Object o1, ref Object o2)
        {
            var type1 = o1.GetType();
            var type2 = o2.GetType();

<# 
var j = 0;
foreach(var t in types) 
{ 
#>
            <#=j != 0 ? "else " : ""#>if(type1 == typeof(<#= t #>) && type2 != typeof(<#= t #>))
            {
                o2 = o2.To<#= upper(t) #>();
            }
            else if(type2 == typeof(<#= t #>) && type1 != typeof(<#= t #>))
            {
                o1 = o1.To<#= upper(t) #>();
            }
<# 
j++;
} 
#>
        }
    }
}